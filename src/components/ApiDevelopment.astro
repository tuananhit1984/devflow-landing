---
const tabs = [
    { id: 'rest', label: 'REST API', active: true },
    { id: 'graphql', label: 'GraphQL', active: false },
    { id: 'webhooks', label: 'Webhooks', active: false },
    { id: 'authentication', label: 'Authentication', active: false },
];
---

<section class="py-24 bg-white">
    <div class="mx-auto px-4 max-w-7xl">
        <div class="text-center mb-12">
            <h2 class="text-4xl font-bold text-gray-900 mb-4">Simple, powerful API development</h2>
            <p class="text-xl text-gray-600">
                From simple REST endpoints to complex GraphQL services, build it all with DevFlow.
            </p>
        </div>

        <div class="flex justify-center space-x-4 mb-8">
            {tabs.map(tab => (
                <button
                    class={`px-4 py-2 text-sm font-medium rounded-full transition-colors duration-200 ${
                        tab.active 
                            ? 'bg-primary text-white' 
                            : 'text-gray-600 hover:text-primary'
                    }`}
                >
                    {tab.label}
                </button>
            ))}
        </div>

        <div class="bg-[#1E1E1E] rounded-lg overflow-hidden shadow-xl">
            <div class="flex items-center px-4 py-2 bg-[#2D2D2D]">
                <div class="flex space-x-2">
                    <div class="w-3 h-3 rounded-full bg-[#FF5F56]"></div>
                    <div class="w-3 h-3 rounded-full bg-[#FFBD2E]"></div>
                    <div class="w-3 h-3 rounded-full bg-[#27C93F]"></div>
                </div>
                <span class="ml-4 text-sm text-gray-400">todo-api.js</span>
            </div>
            <div class="p-6">
                <pre class="text-sm leading-relaxed"><code class="text-gray-300">import { DevFlow } from '@devflow/api';
import { db } from '@devflow/database';

// Initialize and configure API
const api = new DevFlow.API({
    name: 'todo-api',
    cors: true,
    rateLimit: { max: 100, windowMs: 60000 }
});

// Create a new todo
api.post('/todos', async (req, res) => {
    const { title, description } = req.body;
    
    // Validate input
    if (!title) {
        return res.status(400).json({
            error: 'Title is required'
        });
    }

    // Create record in database
    const todo = await db.todos.create({
        title,
        description,
        completed: false,
        userId: req.user.id,
        createdAt: new Date()
    });

    return res.status(201).json(todo);
});

// List all todos for the authenticated user
api.get('/todos', async (req, res) => {
    const todos = await db.todos.findMany({
        where: { userId: req.user.id },
        orderBy: { createdAt: 'desc' }
    });

    return res.json(todos);
});

// One command deployment
api.deploy();</code></pre>
            </div>
        </div>

        <div class="text-center mt-8">
            <a href="/docs" class="text-primary hover:text-primary-dark font-medium">
                View more examples in docs â†’
            </a>
        </div>
    </div>
</section>

<style>
    pre {
        overflow-x: auto;
    }
    code {
        font-family: 'Fira Code', 'Consolas', monospace;
        white-space: pre;
    }
</style>